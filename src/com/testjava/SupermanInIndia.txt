Superman has been invited to India to celebrate Diwali. Unfortunately, on his arrival he learns that he has been invited mainly to help rescue people from a fire accident that has happened in a posh residential locale of New Delhi, where rescue is proving to be especially difficult. As he reaches the place of the fire, before him there are buildings, each of the same height , which are on fire. Since it is Diwali, some floors of the buildings are empty as the occupants have gone elsewhere for celebrations. In his hurry to start the rescue Superman reaches the top of the building, but realizes that his jumping power is depleted and restricted due to change in his geographical setting. He soon understands the restrictions of his jumping power, and they are as follows:

He can use the jumping power any number of times until he reaches the bottom floor, which means he can use the jumping power only until before he reaches the bottom (Ground floor), which means, once he reaches the bottom floor, he cannot move to the top floor again and try to save people. (In one single drop from the top to bottom)

While switching buildings, he loses height  while jumping.

The second restriction is explained below with an example.

Assume . Now Superman is in the 2nd building 5th floor (, ). If he wants to switch to the fifth building (), he will lose height (), which means he will be at floor 3 at building 5 (, ). He can jump freely from the current floor to the floor below on the same building . That is, suppose if he is at , he can go to  without any restrictions. He cannot skip a floor while jumping in the same building. He can go to the floor below the current floor of the same building or use his jumping power, switch building, and lose height .

Given the information about the occupied floors in each of the  buildings, help Superman to determine the maximum number of people he can save in one single drop from the top to the bottom floor with the given restrictions.

Input Format

Input starts with three values: the number of buildings , the height of the buildings , and the height Superman will lose when he switches buildings .

These are followed by  lines. Each  line starts with a non negative integer  indicating how many people are in the th building. Each of the following  integers indicates that a person is at height  in the  buiding. Each of the following  integers are given and repetitions are allowed which means there can be more than one person in a floor.

 indicates building number and  indicates floor number. Building number will not be given; since  lines follow the first line, you can assume that the  line indicates the  building's specifications.

Constraints 
 
 
 (for each , which means the maximum number of people in a particular building will not exceed ) 

Output Format

Output the maximum number of people Superman can save.

Sample Input

4 15 2 
5 1 1 1 4 10
8 9 5 7 7 3 9 8 8
5 9 5 6 4 3
0   
Sample Output

12
Explanation

Input starts with , ,  .

 lines follow. Each line describes building .

Each line begins with , which denotes the number of persons in a particular building, followed by floor number, where each person resides. Floor number can repeat as any number of people can reside on a particular floor.

I've attached a figure here to explain the sample test case.

You can verify the first building's specifications with the figure.

 (Total number of persons in the first building), followed by 1 1 1 4 10(Floor numbers).

 floor = 3 persons.

 floor = 1 person.

 floor = 1 person.

Similarly, the specifications for the other three buildings follow.

The connected line shows the path which Superman can use to save the maximum number of people. In this case, that number is .


You can also note in the figure that when he switches from Building 2 to Building 3, he loses height  (). Similarly, when he switches from Building 3 to Building 1 ,the same height loss happens as mentioned in the problem statement.

Superman

Submissions: 647
Max Score: 80
Difficulty: Hard
Rate This Challenge:
    
More
Current Buffer (saved locally, editable)     
 

 Editorial by Vaidyanathan PK

    You are given that there are N buildings and each building is of height H. And you are also given a value I which is the height superman will lose if he switch buildings. You have to find the maximum number of people superman can save when he starts jumping from the top of the building.

     You can actually solve this problem very easily if you can find the states which the problem depends upon. Instead of looking at each building's height seperately while calculating the answer,you can actually find the answer if you look at every possible height from the top of the building. At a particular height,just check all the possibilities of coming to this position. You would have either came from the floor above the same building or from the I floors above from any other building.

     So now for each height,check the possibilities and store it in a dp table in a bottom manner so that you can avoid recomputation. And then store the maximum number of people that you can save at a particular height from the dp table. Now,do that for all possible heights. The brute force approach of storing the building and height information will not run on time because it performs N*H^2 operations. You can avoid that easily by just looking at the heights,as storing the state of buildings is not actually required.
 Set by Vaidyanathan PK

Problem Setter's code :
C++
# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>   
# include <numeric>
# include <cstdio>
# include <cmath>
# include <cstdlib>    
# include <cstring> 
# include <vector>
# include <list>
# include <set> 
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;

#define GI ({int t;scanf("%d",&t);t;})
#define REP(i,a,b) for(int i=a;i<b;i++)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define pb push_back



#define mp make_pair
#define INF (int)1e9
#define EPS (double)(1e-9)
#define PI (double)(3.141592653589793)

int i, j, test_cases, num_buildings, height_b, height_l, a, n, people[2002][2002], dp[2002][2002],maxheight[2002];

int main() 
{
    scanf("%d %d %d", &num_buildings, &height_b, &height_l);
    for (i = 1; i <= num_buildings; i++) 
    {
    scanf("%d", &a);
        for (j = 0; j < a; j++) 
        {
             scanf("%d", &n);
             people[n][i]++; 
        }
    }

    for( int i = 1; i <= height_b; i++ ) 
    {
        maxheight[i]=0;
        for( int j = 1; j <= num_buildings; j++ ) 
        {
            dp[i][j] = dp[i-1][j];
            if( i - height_l >= 1 ) 
                dp[i][j] = max( dp[i][j] , maxheight[ i - height_l ] );
            dp[i][j] += people[i][j];
            maxheight[i] = max( maxheight[i] , dp[i][j] );
        }
    }

    int ans = 0;
    for(int i=1; i<=num_buildings; i++) 
    {
        ans = max(ans,dp[height_b][i]);
    }
    printf("%d\n",ans);
    return 0;      
}     